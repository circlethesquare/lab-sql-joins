-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1.List the number of films per category.

SELECT c.category_id, c.name , COUNT(c.name) AS number
FROM sakila.category AS c
JOIN sakila.film_category AS f
ON c.category_id = f.category_id
GROUP BY (category_id);

-- 2.Retrieve the store ID, city, and country for each store.

SELECT c.store_id, d.city, f.country
FROM sakila.store AS c
JOIN sakila.address AS a 
ON c.address_id = a.address_id
JOIN sakila.city AS d 
ON d.city_id = a.city_id
JOIN sakila.country AS f 
ON d.country_id = f.country_id;


-- 3.Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS revenue
FROM sakila.store AS s
JOIN sakila.customer AS c 
ON s.store_id = c.store_id 
JOIN sakila.payment AS p 
ON c.customer_id = p.customer_id
GROUP BY store_id
;

-- 4.Determine the average running time of films for each category.

SELECT c.name AS 'Category Name', ROUND(AVG(f.length),1) AS 'AVG. Running Time'
FROM sakila.category AS c
JOIN sakila.film_category AS fc 
ON c.category_id = fc.category_id 
JOIN sakila.film AS f 
ON fc.film_id = f.film_id
GROUP BY name;

-- Bonus:
-- 5.Identify the film categories with the longest average running time.

SELECT c.name AS 'Category Name', ROUND(AVG(f.length),1) AS 'AVG. Running Time'
FROM sakila.category AS c
JOIN sakila.film_category AS fc 
ON c.category_id = fc.category_id 
JOIN sakila.film AS f 
ON fc.film_id = f.film_id
GROUP BY name
ORDER BY ROUND(AVG(f.length),1) DESC
LIMIT 3;

-- 6.Display the top 10 most frequently rented movies in descending order.

SELECT f.title, COUNT(r.inventory_id) AS rental_frequency
FROM sakila.rental AS r 
JOIN sakila.inventory AS i
ON r.inventory_id = i.inventory_id
JOIN sakila.film AS f 
ON i.film_id = f.film_id
GROUP BY title
ORDER BY COUNT(r.inventory_id) DESC
LIMIT 10;

-- 7.Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title, i.store_id
FROM sakila.film AS f 
JOIN sakila.inventory AS i 
ON f.film_id = i.film_id
WHERE f.title = 'Academy Dinosaur' AND i.store_id = 1;

-- 8.Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT f.title, 
    CASE 
        WHEN i.film_id IS NOT NULL THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i ON f.film_id = i.film_id
LEFT JOIN sakila.rental AS r ON i.inventory_id = r.inventory_id;
;